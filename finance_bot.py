import logging
import datetime
from telegram import Update
from telegram.ext import ApplicationBuilder, CommandHandler, ContextTypes, MessageHandler, filters
import openai
import os

# Load API keys from environment variables
openai.api_key = os.getenv("OPENAI_API_KEY")

# Temporary data storage
data = {}
history = {}

# Logging
logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO)

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç! –Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ –≤–µ—Å—Ç–∏ —É—á—ë—Ç –¥–æ—Ö–æ–¥–æ–≤ –∏ —Ä–∞—Å—Ö–æ–¥–æ–≤.\n\n–ö–æ–º–∞–Ω–¥—ã:\n/–¥–æ—Ö–æ–¥ —Å—É–º–º–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—è\n/—Ä–∞—Å—Ö–æ–¥ —Å—É–º–º–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—è\n/–∏—Ç–æ–≥\n/—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\n/–∞–Ω–∞–ª–∏–∑\n/–∞–Ω–∞–ª–∏–∑_–º–µ—Å—è—Ü YYYY-MM\n/—Å–±—Ä–æ—Å\n/—Å–æ–≤–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ")

async def add_income(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        user_id = update.effective_user.id
        amount = int(context.args[0])
        category = ' '.join(context.args[1:])
        data.setdefault(user_id, {'income': [], 'expense': []})
        data[user_id]['income'].append((amount, category))
        await update.message.reply_text(f"–î–æ—Ö–æ–¥ {amount} ‚ÇΩ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ '{category}' –¥–æ–±–∞–≤–ª–µ–Ω ‚úÖ")
    except:
        await update.message.reply_text("–û—à–∏–±–∫–∞. –ò—Å–ø–æ–ª—å–∑—É–π —Ñ–æ—Ä–º–∞—Ç: /–¥–æ—Ö–æ–¥ 10000 –ó–∞—Ä–ø–ª–∞—Ç–∞")

async def add_expense(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        user_id = update.effective_user.id
        amount = int(context.args[0])
        category = ' '.join(context.args[1:])
        data.setdefault(user_id, {'income': [], 'expense': []})
        data[user_id]['expense'].append((amount, category))
        await update.message.reply_text(f"–†–∞—Å—Ö–æ–¥ {amount} ‚ÇΩ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ '{category}' –¥–æ–±–∞–≤–ª–µ–Ω ‚ùå")
    except:
        await update.message.reply_text("–û—à–∏–±–∫–∞. –ò—Å–ø–æ–ª—å–∑—É–π —Ñ–æ—Ä–º–∞—Ç: /—Ä–∞—Å—Ö–æ–¥ 500 –ü—Ä–æ–¥—É–∫—Ç—ã")

async def show_balance(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    user_data = data.get(user_id, {'income': [], 'expense': []})
    income = sum(x[0] for x in user_data['income'])
    expense = sum(x[0] for x in user_data['expense'])
    balance = income - expense
    await update.message.reply_text(f"\nüí∞ –î–æ—Ö–æ–¥: {income} ‚ÇΩ\nüí∏ –†–∞—Å—Ö–æ–¥: {expense} ‚ÇΩ\nüìä –ë–∞–ª–∞–Ω—Å: {balance} ‚ÇΩ")

async def show_stats(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    user_data = data.get(user_id, {'income': [], 'expense': []})
    def summarize(entries):
        summary = {}
        for amount, category in entries:
            summary[category] = summary.get(category, 0) + amount
        return summary
    income_summary = summarize(user_data['income'])
    expense_summary = summarize(user_data['expense'])
    msg = "\nüìà –î–æ—Ö–æ–¥—ã –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º:\n"
    for cat, val in income_summary.items():
        msg += f"- {cat}: {val} ‚ÇΩ\n"
    msg += "\nüìâ –†–∞—Å—Ö–æ–¥—ã –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º:\n"
    for cat, val in expense_summary.items():
        msg += f"- {cat}: {val} ‚ÇΩ\n"
    await update.message.reply_text(msg)

async def analyze_expenses(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    user_data = data.get(user_id, {'income': [], 'expense': []})
    if not user_data['expense']:
        await update.message.reply_text("–£ —Ç–µ–±—è –ø–æ–∫–∞ –Ω–µ—Ç —Ä–∞—Å—Ö–æ–¥–æ–≤ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ üßê")
        return
    def summarize(entries):
        summary = {}
        for amount, category in entries:
            summary[category] = summary.get(category, 0) + amount
        return summary
    expense_summary = summarize(user_data['expense'])
    total_expense = sum(expense_summary.values())
    sorted_exp = sorted(expense_summary.items(), key=lambda x: x[1], reverse=True)
    biggest = sorted_exp[0]
    msg = f"üîç –ê–Ω–∞–ª–∏–∑ —Ä–∞—Å—Ö–æ–¥–æ–≤:\n\nüí∏ –í—Å–µ–≥–æ —Ä–∞—Å—Ö–æ–¥–æ–≤: {total_expense} ‚ÇΩ\n"
    msg += f"üèÜ –°–∞–º–∞—è –∑–∞—Ç—Ä–∞—Ç–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è: {biggest[0]} ‚Äî {biggest[1]} ‚ÇΩ\n"
    if biggest[1] > 0.4 * total_expense:
        msg += "‚ö†Ô∏è –≠—Ç–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—è –∑–∞–Ω–∏–º–∞–µ—Ç –±–æ–ª–µ–µ 40% –≤—Å–µ—Ö —Ä–∞—Å—Ö–æ–¥–æ–≤. –ü–æ–¥—É–º–∞–π, –º–æ–∂–Ω–æ –ª–∏ –µ—ë –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å."
    else:
        msg += "‚úÖ –†–∞—Å—Ö–æ–¥—ã —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω—ã –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ —Å–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ."
    await update.message.reply_text(msg)

async def analyze_month(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        user_id = update.effective_user.id
        month_key = context.args[0]
        month_data = history.get(user_id, {}).get(month_key, {'expense': []})
        if not month_data['expense']:
            await update.message.reply_text("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –∑–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –º–µ—Å—è—Ü ‚ùå")
            return
        def summarize(entries):
            summary = {}
            for amount, category in entries:
                summary[category] = summary.get(category, 0) + amount
            return summary
        expense_summary = summarize(month_data['expense'])
        total_expense = sum(expense_summary.values())
        sorted_exp = sorted(expense_summary.items(), key=lambda x: x[1], reverse=True)
        biggest = sorted_exp[0]
        msg = f"üìÖ –ê–Ω–∞–ª–∏–∑ –∑–∞ {month_key}:\nüí∏ –í—Å–µ–≥–æ —Ä–∞—Å—Ö–æ–¥–æ–≤: {total_expense} ‚ÇΩ\n"
        msg += f"üèÜ –°–∞–º–∞—è –∑–∞—Ç—Ä–∞—Ç–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è: {biggest[0]} ‚Äî {biggest[1]} ‚ÇΩ\n\n"
        msg += "üìä –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º:\n"
        for cat, val in sorted_exp:
            percent = val / total_expense * 100
            msg += f"- {cat}: {val} ‚ÇΩ ({percent:.1f}%)\n"
        if biggest[1] > 0.4 * total_expense:
            msg += "\n‚ö†Ô∏è –°–∞–º–∞—è –∑–∞—Ç—Ä–∞—Ç–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è –ø—Ä–µ–≤—ã—à–∞–µ—Ç 40% –≤—Å–µ—Ö —Ä–∞—Å—Ö–æ–¥–æ–≤."
        else:
            msg += "\n‚úÖ –†–∞—Å—Ö–æ–¥—ã —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω—ã –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ —Å–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ."
        await update.message.reply_text(msg)
    except:
        await update.message.reply_text("–û—à–∏–±–∫–∞. –ò—Å–ø–æ–ª—å–∑—É–π —Ñ–æ—Ä–º–∞—Ç: /–∞–Ω–∞–ª–∏–∑_–º–µ—Å—è—Ü YYYY-MM")

async def reset_data(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    month_key = datetime.datetime.now().strftime("%Y-%m")
    user_history = history.setdefault(user_id, {})
    user_history[month_key] = {'expense': data.get(user_id, {}).get('expense', [])}
    income = data.get(user_id, {}).get('income', [])
    data[user_id] = {'income': income, 'expense': []}
    await update.message.reply_text(f"–î–∞–Ω–Ω—ã–µ –∑–∞ {month_key} —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã, —Ä–∞—Å—Ö–æ–¥—ã —Å–±—Ä–æ—à–µ–Ω—ã üîÑ")

async def monthly_reminder(context: ContextTypes.DEFAULT_TYPE):
    bot = context.application.bot
    for user_id in data:
        await bot.send_message(chat_id=user_id, text="üóì –ü—Ä–∏–≤–µ—Ç! –°–µ–≥–æ–¥–Ω—è 1 —á–∏—Å–ª–æ. –ù–µ –∑–∞–±—É–¥—å –æ—Ç–ª–æ–∂–∏—Ç—å –¥–µ–Ω—å–≥–∏ –Ω–∞ –ø–æ–¥—É—à–∫—É –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –∏ –≤–≤–µ—Å—Ç–∏ –¥–æ—Ö–æ–¥—ã –∏ —Ä–∞—Å—Ö–æ–¥—ã üíº")
        month_key = datetime.datetime.now().strftime("%Y-%m")
        user_history = history.setdefault(user_id, {})
        user_history[month_key] = {'expense': data.get(user_id, {}).get('expense', [])}
        income = data.get(user_id, {}).get('income', [])
        data[user_id] = {'income': income, 'expense': []}

async def gpt_advice(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        prompt = ' '.join(context.args)
        if not prompt:
            await update.message.reply_text("–ù–∞–ø–∏—à–∏ –∑–∞–ø—Ä–æ—Å, –Ω–∞–ø—Ä–∏–º–µ—Ä: /—Å–æ–≤–µ—Ç –∫–∞–∫ —Å–æ–∫—Ä–∞—Ç–∏—Ç—å —Ç—Ä–∞—Ç—ã –Ω–∞ –µ–¥—É")
            return
        response = openai.ChatCompletion.create(
            model="gpt-4o",
            messages=[
                {"role": "system", "content": "–¢—ã —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–π –ø–æ–º–æ—â–Ω–∏–∫, –¥–∞–≤–∞–π –∫—Ä–∞—Ç–∫–∏–µ –∏ –ø–æ–ª–µ–∑–Ω—ã–µ —Å–æ–≤–µ—Ç—ã."},
                {"role": "user", "content": prompt}
            ],
        )
        reply = response['choices'][0]['message']['content']
        await update.message.reply_text(reply)
    except Exception as e:
        await update.message.reply_text(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ ChatGPT: {e}")

async def main():
    app = ApplicationBuilder().token(os.getenv("BOT_TOKEN")).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("–¥–æ—Ö–æ–¥", add_income))
    app.add_handler(CommandHandler("—Ä–∞—Å—Ö–æ–¥", add_expense))
    app.add_handler(CommandHandler("–∏—Ç–æ–≥", show_balance))
    app.add_handler(CommandHandler("—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", show_stats))
    app.add_handler(CommandHandler("–∞–Ω–∞–ª–∏–∑", analyze_expenses))
    app.add_handler(CommandHandler("–∞–Ω–∞–ª–∏–∑_–º–µ—Å—è—Ü", analyze_month))
    app.add_handler(CommandHandler("—Å–±—Ä–æ—Å", reset_data))
    app.add_handler(CommandHandler("—Å–æ–≤–µ—Ç", gpt_advice))
    app.job_queue.run_monthly(monthly_reminder, when=datetime.time(hour=9, minute=0), day=1)
    await app.run_polling()

if __name__ == "__main__":
    import asyncio
    asyncio.run(main())
